{"version":3,"sources":["Components/SpellView.js","Components/SpellViewList.js","Components/SearchView.js","App.js","serviceWorker.js","index.js"],"names":["SpellView","spell","this","props","ritualText","traits","includes","className","name","level","school","components","join","dangerouslySetInnerHTML","__html","description","source","React","Component","SpellViewList","spells","map","index","key","SearchView","state","filter","selected_class","filteredSpells","fuseOptions","minMatchCharLength","threshold","keys","text","setState","c","Spells","s","indexOf","fuse","Fuse","search","updateFilteredSpells","id","onChange","e","onChangeFilter","target","value","defaultValue","onChangeClass","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f01fe9c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SpellView extends React.Component {\r\n  render() {\r\n    var spell = this.props.spell;\r\n\r\n    var ritualText = \"\";\r\n    if (spell.traits != null) {\r\n      if (spell.traits.includes(\"rituale\"))\r\n      {\r\n        ritualText = \" (rituale)\"\r\n      }\r\n    }\r\n\r\n    // var componentsText = \"\";\r\n    // if (spell.components != null) {\r\n    //   componentsText = spell.components.join(\", \");\r\n    // }\r\n\r\n    return (\r\n      <div className=\"Spell-view\" >\r\n        <div className=\"Spell-view-name\">{spell.name}</div>\r\n        <div className=\"Spell-view-school\">{spell.level === 0 ?\r\n          \"Trucchetto di \" + spell.school :\r\n          spell.school + \" di \" + spell.level + \"ยบ livello\"}\r\n        {ritualText}</div>\r\n        <div className=\"Spell-traits\">\r\n          <b>Tempo di Lancio: </b>{spell[\"cast_time\"]}<br/>\r\n          <b>Gittata: </b>{spell[\"range\"]}<br/>\r\n          <b>Componenti: </b>{spell.components.join(\", \")}<br/>\r\n          <b>Durata: </b>{spell[\"duration\"]}<br/>\r\n          <b>Classi: </b>{spell[\"classes\"].join(\", \")}<br/>\r\n        </div>\r\n        <div className=\"Spell-description\" dangerouslySetInnerHTML={{__html: spell.description}}/>\r\n        <div className=\"Spell-view-source\">{spell.source}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SpellView;\r\n","import React, { Component } from 'react';\r\nimport SpellView from './SpellView';\r\n\r\nclass SpellViewList extends Component {\r\n  render() {\r\n    var {spells} = this.props;\r\n    // var spells = spells.slice(0, 11);\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          spells.map((spell, index) =>\r\n          <SpellView spell={spell} key={index} />)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SpellViewList;\r\n","import React, { Component } from 'react';\r\nimport Fuse from 'fuse.js';\r\n\r\nimport SpellViewList from './SpellViewList';\r\n\r\nimport Spells from '../data/spells.json';\r\n\r\nclass SearchView extends Component {\r\n  state = {\r\n    filter: \"\",\r\n    selected_class: \"\",\r\n  }\r\n  fuseOptions;\r\n  filteredSpells = [];\r\n\r\n  componentDidMount() {\r\n    this.fuseOptions = {\r\n      // shouldSort: true,\r\n      minMatchCharLength: 2,\r\n      threshold: 0.4,\r\n      keys: ['name']\r\n    }\r\n    // this.updateFilteredSpells();\r\n  }\r\n\r\n  onChangeFilter(text) {\r\n    this.setState({...this.state, filter: text})\r\n    // this.updateFilteredSpells();\r\n  }\r\n\r\n  onChangeClass(c) {\r\n    this.setState({...this.state, selected_class: c})\r\n    // this.updateFilteredSpells();\r\n  }\r\n\r\n  updateFilteredSpells() {\r\n    var spells = this.state.selected_class === \"\"\r\n      ? Spells\r\n      : Spells.filter(s => s['classes'].indexOf(this.state.selected_class) > -1);\r\n    // this.filteredSpells = spells.filter(s => s['name'].toLowerCase().includes(this.state.filter.toLowerCase()))\r\n    if (this.state.filter === \"\") {\r\n      this.filteredSpells = spells;\r\n    } else {\r\n      const options = {\r\n        minMatchCharLength: 2,\r\n        threshold: 0.4,\r\n        keys: ['name']\r\n      }\r\n      var fuse = new Fuse(spells, options);\r\n      this.filteredSpells = fuse.search(this.state.filter);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.updateFilteredSpells();\r\n    // var spells = Spells;\r\n    // var spells = Spells.filter(s =>\r\n    //   s.name.toLowerCase().includes(this.state.filter.toLowerCase()))\r\n\r\n    return(\r\n      <div className=\"SearchView\">\r\n        <div className=\"SearchPanel\">\r\n          <input className=\"Searchbar\" id=\"searchbar\" onChange={e => this.onChangeFilter(e.target.value)}/>\r\n          <select className=\"ClassList\" defaultValue=\"\" onChange={e => this.onChangeClass(e.target.value)}>\r\n            <option value=\"\">Tutte</option>\r\n            <option>Bardo</option>\r\n            <option>Chierico</option>\r\n            <option>Druido</option>\r\n            <option>Mago</option>\r\n            <option>Paladino</option>\r\n            <option>Ranger</option>\r\n            <option>Stregone</option>\r\n            <option>Warlock</option>\r\n          </select>\r\n        </div>\r\n        <SpellViewList spells={this.filteredSpells} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchView;\r\n","import React from 'react';\nimport './App.css';\nimport SearchView from './Components/SearchView';\n\nfunction App() {\n  // spells = spells.filter(s => s.name.toLowerCase().includes(\"mor\".toLowerCase()));\n  return (\n    <div className=\"App\">\n      <SearchView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}